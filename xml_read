#include<stdio.h>
#include<stdlib.h>
#include<libxml/parser.h>
#include<libxml/tree.h>
int main(int argc,char **argv)
{
	xmlDocPtr doc=NULL;
	xmlNodePtr root=NULL,curNode=NULL;
	char *psfilename=NULL;
	
	xmlKeepBlanksDefault(0);
	
	if(argc<1){
		printf("usage:%s xmlname|n",argv[0]);
		exit(1);
	}
	psfilename=argv[1];
	
	//读取xml文档
  doc=xmlReadFile(psfilename,"UTF-8",XML_PARSE_NOBLANKS);
	//doc=xmlParseFile(psfilename);
	
	if(doc==NULL){
		fprintf(stderr,"open file:error\n");
		exit(1);
	}
	printf("the pffilename=%s\n",psfilename);
	
	//从xml文档中获取根节点
	root=xmlDocGetRootElement(doc);
	if(root==NULL){
		printf("get root error\n");
		exit(1);
	}
	printf("the root name=%s\n",root->name);
	if(xmlStrcmp(root->name,(const xmlChar*)"root")!=0){
		printf("the error file\n");
		exit(1);
	}
	//如果root中有TYPE属性就获取TYPE属性的值
	if(xmlHasProp(root,(xmlChar*)"TYPE")){
		xmlChar* szAttr=xmlGetProp(root,(xmlChar*)"TYPE");
		printf("TYPE:%s geng jie dian:%s\n",(char *)szAttr,(char *)root->name);
	}else{
		printf("xml file have no message of TYPE\n");
	}
	
	//得到子节点
	//curNode=root->xmlChildrenNode;
	curNode=root->children;
	char n=0;
	
	while(curNode!=NULL){
		if(curNode->name!=(xmlChar*)"text"){
			printf("the child node %d:%s and the content=%s\n",n++,curNode->name,(char*)xmlNodeGetContent(curNode));
		}
		//遍历同胞节点
		curNode=curNode->next;
	}
	//关闭和清理
	xmlFreeDoc(doc);
	xmlCleanupParser();
	return 0;
}

/*
#include <stdio.h>  
#include <string.h>  
#include <stdlib.h>  
#include <libxml/parser.h>  
  
static int  
parseDoc(char* docname) {  
    xmlDocPtr doc;  
    xmlNodePtr cur;  
    //xmlKeepBlanksDefault(0);  
  
    doc = xmlParseFile(docname);  
  
    if(doc == NULL) {  
        fprintf(stderr, "doc error!\n");  
        return 0;  
    }  
  
    cur = xmlDocGetRootElement(doc);  
  
    if(cur == NULL) {  
        fprintf(stderr, "root error!\n");  
        xmlFreeDoc(doc);  
        return 0;  
    }  
  
    if(xmlStrcmp(cur->name, (const xmlChar*)"root")) {  
        printf("end\n");  
        return 0;  
    }  
  
    cur = cur->children;  
    while(cur != NULL) {  
        printf("name=%s content=%s\n",cur->name,   
                (char*)xmlNodeGetContent(cur));  
                //cur->content);  
        cur = cur->next;  
    }  
    xmlFreeDoc(doc);  
    return 0;  
}  
  
int main() {  
    char* docname = "story.xml";  
    parseDoc(docname);  
    return 1;  
}  

*/
